document.addEventListener("DOMContentLoaded", async () => {
    const courseSelect = document.getElementById("courseSelect");
    const courseCodeSelect = document.getElementById("courseCodeSelect");
    const subjectsContainer = document.getElementById("subjectsContainer");
    const saveChangesBtn = document.getElementById("saveChangesBtn");

    document.querySelector(".back-arrow").addEventListener("click", (event) => {
        event.preventDefault();
        window.history.back(); // ’è’°’∂’∏÷Ç’¥ ’ß ’∂’°’≠’∏÷Ä’§ ’ß’ª
    });

    
    // ‘≤’•’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’∏÷Ç÷Ä’Ω’•÷Ä’® Levels ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å
    async function loadCourses() {
        try {
            console.log("üì° Fetching levels...");
            const response = await fetch("/api/levels");
            
            if (!response.ok) {
                throw new Error(`Server error: ${response.status}`);
            }
    
            const levels = await response.json();
            console.log("‚úÖ Levels loaded:", levels);
    
            courseSelect.innerHTML = `<option value="">‘∏’∂’ø÷Ä’•’¨ ’Ø’∏÷Ç÷Ä’Ω...</option>` +
                levels.map(level => `<option value="${level.id}">${level.name}</option>`).join("");
        } catch (error) {
            console.error("‚õî Error loading levels:", error);
        }
    }
    
    async function loadCourseCodes(levelId) {
        try {
            console.log(`üì° Fetching courses for levelId: ${levelId}`);
            
            if (!levelId || isNaN(levelId)) {
                console.error("‚õî Invalid levelId:", levelId);
                return;
            }
    
            const response = await fetch(`/api/courses?levelId=${levelId}`);
            if (!response.ok) throw new Error(`Server error: ${response.status}`);
    
            const courses = await response.json();
            console.log("‚úÖ Courses fetched:", courses);
    
            if (!Array.isArray(courses)) throw new Error("Returned data is not an array");
    
            courseCodeSelect.innerHTML = `<option value="">‘∏’∂’ø÷Ä’•’¨ ’Ø’∏÷Ç÷Ä’Ω’´ ’Ø’∏’§...</option>` +
                courses.map(course => `<option value="${course.id}">${course.code}</option>`).join("");
    
            courseCodeSelect.disabled = false;
        } catch (error) {
            console.error("‚õî Error loading course codes:", error);
        }
    }
    
    async function loadCourseCodes(levelId) {
        try {
            console.log(`üì° Fetching courses for levelId: ${levelId}`);
            
            if (!levelId || isNaN(levelId)) {
                console.error("‚õî Invalid levelId:", levelId);
                return;
            }
    
            const response = await fetch(`/api/courses?levelId=${levelId}`);
            if (!response.ok) throw new Error(`Server error: ${response.status}`);
    
            const courses = await response.json();
            console.log("‚úÖ Courses fetched:", courses);
    
            if (!Array.isArray(courses)) throw new Error("Returned data is not an array");
    
            courseCodeSelect.innerHTML = `<option value="">‘∏’∂’ø÷Ä’•’¨ ’Ø’∏÷Ç÷Ä’Ω’´ ’Ø’∏’§...</option>` +
                courses.map(course => `<option value="${course.id}">${course.code}</option>`).join("");
    
            courseCodeSelect.disabled = false;
        } catch (error) {
            console.error("‚õî Error loading course codes:", error);
        }
    }
    
    async function loadSubjects(courseCode) {
        try {
            console.log(`üì° Fetching subjects for courseCode: ${courseCode}`);
            const response = await fetch(`/api/subjects/${courseCode}`);
    
            if (!response.ok) {
                throw new Error(`Server error: ${response.status}`);
            }
    
            const subjects = await response.json();
            console.log("üì¶ Received subjects:", subjects); // ‚úÖ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ API-’´÷Å ’Ω’ø’°÷Å’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    
            if (!Array.isArray(subjects) || subjects.length === 0) {
                console.warn("‚ö†Ô∏è No subjects received or data is not an array!");
                document.getElementById("subjectsContainer").innerHTML = `<p style="color: red;">üì¢ ‘±’º’°÷Ä’Ø’°’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨!</p>`;
                return;
            }
    
            renderSubjects(subjects); // ‚úÖ ‘±’º’°÷Ä’Ø’°’∂’•÷Ä’® ÷Å’∏÷Ç’µ÷Å ’•’∂÷Ñ ’ø’°’¨’´’Ω
        } catch (error) {
            console.error("‚õî Error loading subjects:", error);
        }
    }
    
    function renderSubjects(subjects) {
        console.log("üì¶ Rendering subjects:", subjects);
    
        const subjectsContainer = document.getElementById("subjectsContainer");
        subjectsContainer.innerHTML = ""; // ’Ñ’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∞’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    
        subjects.forEach(subject => {
            const subjectElement = document.createElement("div");
            subjectElement.classList.add("subject-card");
    
            // ‚úÖ ‘±’∫’°’∞’∏’æ’∏÷Ç’¥ ’•’∂÷Ñ, ’∏÷Ä `undefined` ’°÷Ä’™’•÷Ñ’∂’•÷Ä ’π’¨’´’∂’•’∂
            subjectElement.setAttribute("data-id", subject.subject_id);
            subjectElement.setAttribute("data-subject_id", subject.subject_id || "");
            subjectElement.setAttribute("data-teacher_id", subject.teacher_id || "");
            subjectElement.setAttribute("data-room_id", subject.room_id || "");
            subjectElement.setAttribute("data-type_id", subject.type_id || "");
            subjectElement.setAttribute("data-frequency", subject.weekly_type || "");
    
            subjectElement.innerHTML = `
                <h3>${subject.subject_name || "‘±’º’°÷Ä’Ø’° ’π’Ø’°"}</h3>
                <p><strong>‘¥’°’Ω’°’≠’∏’Ω:</strong> ${subject.teacher_name || "’â’´ ’∂’∑’æ’°’Æ"}</p>
                <p><strong>‘º’Ω’°÷Ä’°’∂:</strong> ${subject.room_number || "’â’´ ’∂’∑’æ’°’Æ"}</p>
                <p><strong>‘¥’°’Ω’´ ’è’´’∫:</strong> ${subject.type_name || "’â’´ ’∂’∑’æ’°’Æ"}</p>
                <p><strong>’Ä’°’≥’°’≠’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:</strong> 
                    ${subject.weekly_type === "weekly" ? "‘±’¥’•’∂ ’∑’°’¢’°’©" : subject.weekly_type === "biweekly" ? "2 ’∑’°’¢’°’©’® ’¥’•’Ø" : "’â’´ ’∂’∑’æ’°’Æ"}
                </p>
                <button class="delete-btn" data-id="${subject.subject_id}">‚ùå ’ã’∂’ª’•’¨</button>
            `;
    
            // ‚úÖ ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ click event, ’∏÷Ä’∫’•’Ω’¶’´ pop-up-’® ’¢’°÷Å’æ’´ ’Ω’•’≤’¥’•’¨’´’Ω
            subjectElement.addEventListener("click", function () {
                openEditPopup(subjectElement);
            });
    
            subjectsContainer.appendChild(subjectElement);
        });
    
        console.log("‚úÖ Rendered subjects successfully!");
    }
    
    
    // ‘ø’∏÷Ç÷Ä’Ω ’®’∂’ø÷Ä’•’¨’´’Ω ’¢’•’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’Ø’∏’§’•÷Ä’®
    courseSelect.addEventListener("change", (e) => {
        const selectedLevel = e.target.value;
        if (selectedLevel) {
            loadCourseCodes(selectedLevel);
        } else {
            courseCodeSelect.innerHTML = `<option value="">‘∏’∂’ø÷Ä’•’¨ ’Ø’∏÷Ç÷Ä’Ω’´ ’Ø’∏’§...</option>`;
            courseCodeSelect.disabled = true;
        }
    });

    // ‘ø’∏÷Ç÷Ä’Ω’´ ’Ø’∏’§ ’®’∂’ø÷Ä’•’¨’´’Ω ’¢’•’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’º’°÷Ä’Ø’°’∂’•÷Ä’®
    courseCodeSelect.addEventListener("change", (e) => {
        const selectedCourseCode = e.target.value;
        if (selectedCourseCode) {
            loadSubjects(selectedCourseCode);
        } else {
            subjectsContainer.innerHTML = "";
            saveChangesBtn.disabled = true;
        }
    });


    // ’ã’∂’ª’¥’°’∂ ’Ø’∏’≥’°’Ø’´ ’æ÷Ä’° event listener
    subjectsContainer.addEventListener("click", async (e) => {
        if (e.target.classList.contains("delete-btn")) {
            const subjectId = e.target.dataset.id;
            if (confirm("‘¥’∏÷Ç÷Ñ ’æ’Ω’ø’°’∞ ’•’û÷Ñ, ’∏÷Ä ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’ª’∂’ª’•’¨ ’°’µ’Ω ’°’º’°÷Ä’Ø’°’∂÷â")) {
                try {
                    await fetch(`/api/subjects/${subjectId}`, { method: "DELETE" });
                    loadSubjects(courseCodeSelect.value); // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ÷Å’∏÷Ç÷Å’°’Ø’®
                } catch (error) {
                    console.error("‚õî Error deleting subject:", error);
                }
            }
        }
    });


    subjectsContainer.addEventListener("click", (event) => {
        const subjectCard = event.target.closest(".subject-card");
        if (subjectCard) {
            console.log("‚úÖ Click detected on subject:", subjectCard);
            openEditPopup(subjectCard);
        }
    });

    // ‘≤’•’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’∏÷Ç÷Ä’Ω’•÷Ä’® ’Ω’Ø’¶’¢’∏÷Ç’¥
    loadCourses();
});

function openEditPopup(subjectCard) {
    const popup = document.getElementById("editPopup");

    // ’è’æ’µ’°’¨’∂’•÷Ä’´ ’Ω’ø’°÷Å’∏÷Ç’¥ `data-` ’°’ø÷Ä’´’¢’∏÷Ç’ø’∂’•÷Ä’´÷Å
    const subjectId = subjectCard.getAttribute("data-subject_id");
    const subjectName = subjectCard.querySelector("h3").textContent; // ‘±’º’°÷Ä’Ø’°’µ’´ ’°’∂’æ’°’∂’∏÷Ç’¥
    const teacherId = subjectCard.getAttribute("data-teacher_id");
    const roomId = subjectCard.getAttribute("data-room_id");
    const typeId = subjectCard.getAttribute("data-type_id");
    const frequency = subjectCard.getAttribute("data-frequency") || "weekly"; // Default

    // ‘¥’°’∑’ø’•÷Ä’´ ’®’∂’ø÷Ä’∏÷Ç’¥
    const subjectInput = document.getElementById("editSubject");
    const teacherSelect = document.getElementById("editTeacher");
    const roomSelect = document.getElementById("editRoom");
    const typeSelect = document.getElementById("editType");
    const frequencySelect = document.getElementById("editFrequency");

    // ‚úÖ 1. ‘±’º’°÷Ä’Ø’°’µ’´ ’°’∂’∏÷Ç’∂’® ’¥’´’°’µ’∂ ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ (input, readonly)
    subjectInput.value = subjectName;
    subjectInput.setAttribute("readonly", true);

    // ‚úÖ 2. ‘¥’°’Ω’°’≠’∏’Ω’´ ’§’°’∑’ø’® ’¢’•’º’∂’æ’∏÷Ç’¥ ’ß, ’¢’°’µ÷Å ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ÷É’∏’≠’•’¨
    fetch("/api/teachers")
        .then(response => response.json())
        .then(data => {
            teacherSelect.innerHTML = ""; // ’Ñ’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∞’´’∂’®
            data.forEach(teacher => {
                const option = document.createElement("option");
                option.value = teacher.id;
                option.textContent = teacher.name;
                teacherSelect.appendChild(option);
            });
            teacherSelect.value = teacherId || ""; // ’Ü’°’≠’∂’°’Ø’°’∂ ’®’∂’ø÷Ä’æ’°’Æ ’§’°’Ω’°’≠’∏’Ω
        });

    // ‚úÖ 3. ‘º’Ω’°÷Ä’°’∂’® ’¢’•’º’∂’æ’∏÷Ç’¥ ’ß, ’¢’°’µ÷Å ÷É’∏’≠’•’¨’∏÷Ç ’∞’∂’°÷Ä’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’°
    fetch("/api/rooms")
        .then(response => response.json())
        .then(data => {
            roomSelect.innerHTML = "";
            data.forEach(room => {
                const option = document.createElement("option");
                option.value = room.id;
                option.textContent = room.number;
                roomSelect.appendChild(option);
            });
            roomSelect.value = roomId || "";
        });

    // ‚úÖ 4. ‘¥’°’Ω’´ ’ø’•’Ω’°’Ø’® ’∂’∏÷Ç’µ’∂’∫’•’Ω ’Ø’°÷Ä’•’¨’´ ’ß ÷É’∏’≠’•’¨
    fetch("/api/types")
        .then(response => response.json())
        .then(data => {
            typeSelect.innerHTML = "";
            data.forEach(type => {
                const option = document.createElement("option");
                option.value = type.id;
                option.textContent = type.name;
                typeSelect.appendChild(option);
            });
            typeSelect.value = typeId || "";
        });

    // ‚úÖ 5. ’Ä’°’≥’°’≠’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’® ’¢’•’º’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’µ’∂ `weekly` ’Ø’°’¥ `biweekly`
    frequencySelect.innerHTML = `
        <option value="weekly">‘±’¥’•’∂ ’∑’°’¢’°’©</option>
        <option value="biweekly">2 ’∑’°’¢’°’©’® ’¥’•’Ø</option>
    `;
    frequencySelect.value = frequency;

    // ‚úÖ ’ë’∏÷Ç’µ÷Å ’•’∂÷Ñ ’ø’°’¨’´’Ω popup-’®
    popup.classList.add("visible");
}


function closeEditPopup() {
    const popup = document.getElementById("editPopup");
    const overlay = document.getElementById("popupOverlay");

    if (popup && overlay) {
        popup.classList.remove("visible");
        popup.classList.add("hidden");
        overlay.classList.remove("visible");
    }
}



async function loadDropdownData(elementId, apiEndpoint) {
    try {
        const response = await fetch(apiEndpoint);
        const data = await response.json();

        const select = document.getElementById(elementId);
        select.innerHTML = data.map(item => `<option value="${item.id}">${item.name}</option>`).join("");
    } catch (error) {
        console.error(`‚õî Error fetching ${elementId}:`, error);
    }
}


async function saveEditedSchedule() {
    const id = document.getElementById("editPopup").getAttribute("data-id");
    const updatedSchedule = {
        subject_id: document.getElementById("editSubject").value,
        teacher_id: document.getElementById("editTeacher").value,
        room_id: document.getElementById("editRoom").value,
        type_id: document.getElementById("editType").value,
        frequency: document.getElementById("editFrequency").value
    };

    try {
        const response = await fetch(`/api/edit/${id}`, { // ‚úÖ ’à÷Ç’≤’≤’°’Ø’´’∏÷Ä’•’∂ edit API-’´’∂ ’•’∂÷Ñ ’§’´’¥’∏÷Ç’¥
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedSchedule)
        });

        if (response.ok) {
            alert("‚úÖ ’ì’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’® ’∫’°’∞’∫’°’∂’æ’•÷Å!");
            closeEditPopup();
            location.reload();
        } else {
            alert("‚ùå ’ç’≠’°’¨ ÷É’∏÷É’∏’≠’¥’°’∂ ’™’°’¥’°’∂’°’Ø");
        }
    } catch (error) {
        console.error("‚õî Error saving changes:", error);
    }
}


function renderSubjects(subjects) {
    console.log("üì¶ Rendering subjects:", subjects);

    const subjectsContainer = document.getElementById("subjectsContainer");
    if (!subjectsContainer) {
        console.error("‚õî Error: subjectsContainer not found in DOM!");
        return;
    }

    subjectsContainer.innerHTML = ""; // ’Ñ’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∞’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’®

    subjects.forEach(subject => {
        const subjectElement = document.createElement("div");
        subjectElement.classList.add("subject-card");

        // ‚úÖ ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∏÷Ä’∫’•’Ω data-* attributes
        subjectElement.setAttribute("data-id", subject.subject_id);
        subjectElement.setAttribute("data-subject_id", subject.subject_id);
        subjectElement.setAttribute("data-teacher_id", subject.teacher_id);
        subjectElement.setAttribute("data-room_id", subject.room_id);
        subjectElement.setAttribute("data-type_id", subject.type_id);
        subjectElement.setAttribute("data-frequency", subject.weekly_type);

        subjectElement.innerHTML = `
            <h3>${subject.subject_name || "‘±’º’°÷Ä’Ø’° ’π’Ø’°"}</h3>
            <p><strong>‘¥’°’Ω’°’≠’∏’Ω:</strong> ${subject.teacher_name || "’â’´ ’∂’∑’æ’°’Æ"}</p>
            <p><strong>‘º’Ω’°÷Ä’°’∂:</strong> ${subject.room_number || "’â’´ ’∂’∑’æ’°’Æ"}</p>
            <p><strong>‘¥’°’Ω’´ ’è’´’∫:</strong> ${subject.type_name || "’â’´ ’∂’∑’æ’°’Æ"}</p>
            <p><strong>’Ä’°’≥’°’≠’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:</strong> 
                ${subject.weekly_type === "weekly" ? "‘±’¥’•’∂ ’∑’°’¢’°’©" : subject.weekly_type === "biweekly" ? "2 ’∑’°’¢’°’©’® ’¥’•’Ø" : "’â’´ ’∂’∑’æ’°’Æ"}
            </p>
            <button class="delete-btn" data-id="${subject.subject_id}">‚ùå ’ã’∂’ª’•’¨</button>
        `;

        // ‚úÖ ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ click event, ’∏÷Ä’∫’•’Ω’¶’´ pop-up-’® ’¢’°÷Å’æ’´ ’Ω’•’≤’¥’•’¨’´’Ω
        subjectElement.addEventListener("click", function () {
            openEditPopup(subjectElement);
        });

        subjectsContainer.appendChild(subjectElement);
    });

    console.log("‚úÖ Rendered subjects successfully!");
}

async function loadDropdownData(elementId, apiEndpoint) {
    try {
        console.log(`üì° Fetching ${elementId} from ${apiEndpoint}...`);
        
        const response = await fetch(apiEndpoint);

        if (!response.ok) {
            throw new Error(`‚ùå Failed to fetch ${elementId}: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!Array.isArray(data)) {
            throw new Error(`‚ùå Invalid data format for ${elementId}`);
        }

        const select = document.getElementById(elementId);
        select.innerHTML = `<option value="">‘∏’∂’ø÷Ä’•’¨...</option>` + 
            data.map(item => `<option value="${item.id}">${item.name || item.number}</option>`).join("");

        console.log(`‚úÖ Loaded ${elementId} successfully`);
    } catch (error) {
        console.error(`‚õî Error fetching ${elementId}:`, error);
    }
}
