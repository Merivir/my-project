// ’ç’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ role-’® URL-’∏’æ ’Ø’°’¥ localStorage-’´÷Å
function getUserRoleFromURL() {
    const params = new URLSearchParams(window.location.search);
    return params.get("role") || localStorage.getItem("userRole") || "guest";
  }
  
  const userRole = getUserRoleFromURL();
  const isAdmin = userRole === "admin";
  
  // ‘¥’°’Ω’•÷Ä’´ ’ø’´’∫’•÷Ä’´ ’¢’°’≠’∏÷Ç’¥’∂’•÷Ä’´ ’°’≤’µ’∏÷Ç’Ω’°’Ø
  const CONFLICTS = {
    "‘¥’°’Ω": ["‘¥’°’Ω", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ1", "‘≥’∏÷Ä’Æ2", "‘≥’∏÷Ä’Æ3", "‘º’°’¢1", "‘º’°’¢2", "‘º’°’¢3", "‘º’°’¢4"],
    "‘≥’∏÷Ä’Æ": ["‘¥’°’Ω", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ1", "‘≥’∏÷Ä’Æ2", "‘≥’∏÷Ä’Æ3", "‘º’°’¢1", "‘º’°’¢2", "‘º’°’¢3", "‘º’°’¢4"],
    "‘≥’∏÷Ä’Æ1": ["‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ1", "‘º’°’¢1", "‘º’°’¢2", "‘¥’°’Ω"],
    "‘≥’∏÷Ä’Æ2": ["‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ2", "‘º’°’¢2", "‘º’°’¢3", "‘¥’°’Ω"],
    "‘≥’∏÷Ä’Æ3": ["‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ3", "‘º’°’¢3", "‘º’°’¢4", "‘¥’°’Ω"],
    "‘º’°’¢1": ["‘º’°’¢1", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ1", "‘¥’°’Ω"],
    "‘º’°’¢2": ["‘º’°’¢2", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ1", "‘≥’∏÷Ä’Æ2", "‘¥’°’Ω"],
    "‘º’°’¢3": ["‘º’°’¢3", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ2", "‘≥’∏÷Ä’Æ3", "‘¥’°’Ω"],
    "‘º’°’¢4": ["‘º’°’¢4", "‘≥’∏÷Ä’Æ", "‘≥’∏÷Ä’Æ3", "‘¥’°’Ω"]
  };
  
  // ‘±’¥’¢’∏’≤’ª ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® (’Ø’∫’°’∞’•’∂÷Ñ ’£’¨’∏’¢’°’¨ ÷É’∏÷É’∏’≠’°’Ø’°’∂’∏÷Ç’¥)
  let scheduleData = [];
  
  // Toast ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä
  function createToastContainer() {
    if (!document.querySelector('.toast-container')) {
      const container = document.createElement('div');
      container.classList.add('toast-container');
      document.body.appendChild(container);
    }
  }
  
  function showToast(type, title, message, duration = 5000) {
    createToastContainer();
    const toastContainer = document.querySelector('.toast-container');
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icon = type === "success" ? "‚úì" : "‚úï";
    
    toast.innerHTML = `
      <div class="toast-icon">${icon}</div>
      <div class="toast-content">
        <div class="toast-title">${title}</div>
        <div class="toast-message">${message}</div>
      </div>
    `;
    
    toastContainer.appendChild(toast);
    
    // ’Ä’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ toast-’® ’∏÷Ä’∏’∑’°’Ø’´ ’™’°’¥’°’∂’°’Ø ’°’∂÷Å
    setTimeout(() => {
      toast.classList.add('hide');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, duration);
  }
  
  // ‘≤’•’º’∂’¥’°’∂ ’°’∂’´’¥’°÷Å’´’°
  function showLoading(container, message = '’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’•’º’∂’∏÷Ç’¥...') {
    container.innerHTML = `
      <div class="loading-container">
        <div class="loading-spinner"></div>
        <div class="loading-text">${message}</div>
      </div>
    `;
  }
  
  document.addEventListener("DOMContentLoaded", function () {
    const scheduleBody = document.querySelector("#scheduleBody");
    const scheduleContainer = document.getElementById("scheduleContainer");
    
    if (scheduleContainer) {
      showLoading(scheduleContainer, '‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’¢’•’º’∂’∏÷Ç’¥...');
    }
    
    fetch("/schedule_approval")
      .then(response => {
        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (!Array.isArray(data) || data.length === 0) {
          if (scheduleBody) {
            scheduleBody.innerHTML = "<tr><td colspan='8' style='text-align:center;'>üì¢ ’è’æ’µ’°’¨’∂’•÷Ä ’π’Ø’°’∂</td></tr>";
          }
          if (scheduleContainer) {
            scheduleContainer.innerHTML = "<div style='text-align:center; padding: 2rem; color: #64748b;'>üì¢ ‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä ’π’Ø’°’∂</div>";
          }
          return;
        }
  
        // ’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’¢’∏’≤’ª ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
        scheduleData = data;
        renderSchedule(data);
        showToast('success', '‘≤’•’º’∂’æ’°’Æ ’ß', '‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’¢’•’º’∂’æ’•’¨ ’ß');
      })
      .catch(error => {
        console.error("Error fetching schedule approval data:", error);
        if (scheduleContainer) {
          scheduleContainer.innerHTML = `<div style='text-align:center; padding: 2rem; color: #ef4444;'>‚ùå ’ç’≠’°’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¢’•’º’∂’¥’°’∂ ’™’°’¥’°’∂’°’Ø: ${error.message}</div>`;
        }
        showToast('error', '’ç’≠’°’¨', '’â’∞’°’ª’∏’≤’æ’•÷Å ’¢’•’º’∂’•’¨ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®');
      });
  
    if (isAdmin) {
      const confirmBtn = document.getElementById("confirmBtn");
      const rejectBtn = document.getElementById("rejectBtn");
      
      if (confirmBtn) {
        confirmBtn.addEventListener("click", function () {
          // ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¢’•’º’∂’¥’°’∂ ’°’∂’´’¥’°÷Å’´’°
          const dashboardContainer = document.querySelector('.dashboard-container');
          if (dashboardContainer) {
            showLoading(dashboardContainer, '‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥...');
          }
          
          // ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°÷Ä÷Å’∏÷Ç’¥ ’Ω’•÷Ä’æ’•÷Ä’´’∂
          fetch("/api/approve-schedule", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            }
          })
          .then(response => {
            if (!response.ok) {
              throw new Error("’Ä’°’Ω’ø’°’ø’¥’°’∂ ’Ω’≠’°’¨");
            }
            return response.json();
          })
          .then(data => {
            showToast('success', '’Ä’°’Ω’ø’°’ø’æ’°’Æ ’ß', '‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß');
            setTimeout(() => {
              window.location.href = "/guest";
            }, 1500);
          })
          .catch(error => {
            console.error("Error approving schedule:", error);
            showToast('error', '’ç’≠’°’¨', '’â’∞’°’ª’∏’≤’æ’•÷Å ’∞’°’Ω’ø’°’ø’•’¨ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’®');
            // ’é’•÷Ä’°’Ø’°’∂’£’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’°’≠’Ø’´’∂ ’ø’•’Ω÷Ñ’®
            fetch("/schedule_approval")
              .then(response => response.json())
              .then(data => renderSchedule(data))
              .catch(error => console.error("Error refetching data:", error));
          });
        });
      }
  
      if (rejectBtn) {
        rejectBtn.addEventListener("click", function () {
          const modal = document.createElement('div');
          modal.className = 'confirm-modal';
          modal.innerHTML = `
            <div class="confirm-modal-content">
              <h3>’Ä’°’Ω’ø’°’ø’•’¨ ’¥’•÷Ä’™’∏÷Ç’¥’®</h3>
              <p>’Ä’°’¥’∏’¶’æ’°’û’Æ ’•÷Ñ, ’∏÷Ä ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’∞÷Ä’°’™’°÷Ä’æ’•’¨:</p>
              <div class="confirm-modal-buttons">
                <button class="confirm-yes">‘±’µ’∏</button>
                <button class="confirm-no">’â’•’≤’°÷Ä’Ø’•’¨</button>
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          modal.querySelector('.confirm-yes').addEventListener('click', function() {
            // ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’¥’•÷Ä’™’¥’°’∂ ’∞’°÷Ä÷Å’∏÷Ç’¥
            fetch("/api/reject-schedule", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              }
            })
            .then(response => {
              if (!response.ok) {
                throw new Error("’Ñ’•÷Ä’™’¥’°’∂ ’Ω’≠’°’¨");
              }
              return response.json();
            })
            .then(data => {
              showToast('error', '’Ñ’•÷Ä’™’æ’°’Æ ’ß', '‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’® ’¥’•÷Ä’™’æ’•’¨ ’ß');
              setTimeout(() => {
                window.location.href = "/admin-dashboard";
              }, 1500);
            })
            .catch(error => {
              console.error("Error rejecting schedule:", error);
              showToast('error', '’ç’≠’°’¨', '’â’∞’°’ª’∏’≤’æ’•÷Å ’¥’•÷Ä’™’•’¨ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’®');
            });
            
            document.body.removeChild(modal);
          });
          
          modal.querySelector('.confirm-no').addEventListener('click', function() {
            document.body.removeChild(modal);
          });
          
          // ’ì’°’Ø’•’¨ ’¥’∏’§’°’¨’® ’§÷Ä’Ω’´÷Å ’Ω’•’≤’¥’•’¨’∏’æ
          modal.addEventListener('click', function(e) {
            if (e.target === modal) {
              document.body.removeChild(modal);
            }
          });
        });
      }
    } else {
      const confirmBtn = document.getElementById("confirmBtn");
      const rejectBtn = document.getElementById("rejectBtn");
      
      if (confirmBtn) confirmBtn.remove();
      if (rejectBtn) rejectBtn.remove();
    }
  });
  
  function renderSchedule(data) {
    const container = document.getElementById("scheduleContainer");
    if (!container) return console.error("üìõ scheduleContainer not found");
    container.innerHTML = "";
  
    const grouped = {};
    const dualWeekLessons = new Map();
  
    data.forEach(item => {
      const course = item.course;
      const weekType = item.week_type;
      const targetWeekTypes = weekType === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨" ? ["’∞’°’¥’°÷Ä’´’π", "’∞’°’µ’ø’°÷Ä’°÷Ä"] : [weekType];
  
      targetWeekTypes.forEach(type => {
        if (!grouped[course]) grouped[course] = {};
        if (!grouped[course][type]) grouped[course][type] = [];
        grouped[course][type].push({ ...item, originalWeekType: weekType });
      });
    });
  
    const days = ["‘µ÷Ä’Ø’∏÷Ç’∑’°’¢’©’´", "‘µ÷Ä’•÷Ñ’∑’°’¢’©’´", "’â’∏÷Ä’•÷Ñ’∑’°’¢’©’´", "’Ä’´’∂’£’∑’°’¢’©’´", "’à÷Ç÷Ä’¢’°’©"];
    const timeSlots = ["09:30-10:50", "11:00-12:20", "12:50-14:10", "14:20-15:40"];
  
    for (const [course, weekTypes] of Object.entries(grouped)) {
      const courseTitle = document.createElement("h2");
      courseTitle.textContent = `üìò ${course}`;
      container.appendChild(courseTitle);
  
      for (const [weekType, lessons] of Object.entries(weekTypes)) {
        const weekTitle = document.createElement("h3");
        weekTitle.textContent = `üïì ’á’°’¢’°’©’æ’° ’ø’•’Ω’°’Ø’ù ${weekType}`;
        container.appendChild(weekTitle);
  
        const table = document.createElement("table");
        table.classList.add("schedule-table");
  
        const thead = document.createElement("thead");
        const headerRow = document.createElement("tr");
        headerRow.innerHTML = "<th>‘∫’°’¥</th>" + days.map(day => `<th>${day}</th>`).join("");
        thead.appendChild(headerRow);
        table.appendChild(thead);
  
        const tbody = document.createElement("tbody");
        timeSlots.forEach(slot => {
          const row = document.createElement("tr");
          const timeCell = document.createElement("td");
          timeCell.textContent = slot;
          row.appendChild(timeCell);
  
          days.forEach(day => {
            const cell = document.createElement("td");
            cell.id = `cell-${day}-${slot}-${course}-${weekType}`;
            cell.classList.add("dropzone");
            cell.dataset.day = day;
            cell.dataset.slot = slot;
            cell.dataset.course = course;
            cell.dataset.weekType = weekType;
  
            if (isAdmin) {
              cell.addEventListener("dragover", e => e.preventDefault());
              cell.addEventListener("drop", handleDrop);
              
              // ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’ø’∏÷Ç’Ø ’§’°’Ω, ’•÷Ä’¢ drag-’® ’ø’•’≤’´ ’ß ’∏÷Ç’∂’•’∂’∏÷Ç’¥ ’§’°’∑’ø’´ ’æ÷Ä’°
              cell.addEventListener("dragenter", function() {
                this.style.backgroundColor = "rgba(61, 125, 217, 0.1)";
              });
              
              cell.addEventListener("dragleave", function() {
                this.style.backgroundColor = "";
              });
            }
  
            const matchingLessons = lessons.filter(l => l.day === day && l.time_slot === slot);
            matchingLessons.forEach(lesson => {
              const div = document.createElement("div");
              div.classList.add("class-block");
              div.draggable = isAdmin;
              div.innerHTML = `<strong>${lesson.subject}</strong><span>${lesson.class_type}, ${lesson.room}, ${lesson.teacher}</span>`;
              div.dataset.id = lesson.id;
              div.dataset.day = day;
              div.dataset.slot = slot;
              div.dataset.course = course;
              div.dataset.week = weekType;
              div.dataset.originalWeek = lesson.originalWeekType || weekType;
              div.dataset.classType = lesson.class_type;
              div.dataset.room = lesson.room;
              div.dataset.teacher = lesson.teacher;
  
              if (isAdmin) {
                div.addEventListener("dragstart", handleDragStart);
                
                // ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ hover tooltip
                div.title = `’î’°’∑’•÷Ñ ’°’µ’Ω ’§’°’Ω’® ’°’µ’¨ ’§’°’∑’ø ’ø’•’≤’°÷É’∏’≠’•’¨’∏÷Ç ’∞’°’¥’°÷Ä`;
              }
  
              cell.appendChild(div);
  
              if (lesson.originalWeekType === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨") {
                if (!dualWeekLessons.has(lesson.id)) dualWeekLessons.set(lesson.id, []);
                dualWeekLessons.get(lesson.id).push(div);
              }
            });
  
            row.appendChild(cell);
          });
  
          tbody.appendChild(row);
        });
  
        table.appendChild(tbody);
        container.appendChild(table);
      }
    }
  
    window._dualWeekLessonsMap = dualWeekLessons;
  }
  
  let draggedElement = null;
  
  function handleDragStart(e) {
    draggedElement = e.target;
    e.dataTransfer.effectAllowed = "move";
    
    // ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’§÷Ä’°’£’´ ’ß÷Ü’•’Ø’ø
    setTimeout(() => {
      this.classList.add('dragging');
    }, 0);
  }
  
  // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’°’≠’∏’Ω’´ ’¢’°’≠’∏÷Ç’¥’®
  function checkTeacherConflict(teacher, day, timeSlot, weekType) {
    const conflictingLessons = scheduleData.filter(lesson => 
      lesson.teacher === teacher && 
      lesson.day === day && 
      lesson.time_slot === timeSlot &&
      (lesson.week_type === weekType || lesson.week_type === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨" || weekType === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨")
    );
    
    return conflictingLessons.length > 0;
  }
  
  // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’¨’Ω’°÷Ä’°’∂’´ ’¢’°’≠’∏÷Ç’¥’®
  function checkRoomConflict(room, day, timeSlot, weekType) {
    const conflictingLessons = scheduleData.filter(lesson => 
      lesson.room === room && 
      lesson.day === day && 
      lesson.time_slot === timeSlot &&
      (lesson.week_type === weekType || lesson.week_type === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨" || weekType === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨")
    );
    
    return conflictingLessons.length > 0;
  }
  
  // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’´’∫’´ ’¢’°’≠’∏÷Ç’¥’®
  function checkTypeConflict(classType, existingClassType) {
    if (!classType || !existingClassType) return false;
    
    return CONFLICTS[classType] && CONFLICTS[classType].includes(existingClassType);
  }
  
  async function handleDrop(e) {
    e.preventDefault();
    
    // ’é’•÷Ä’°’Ø’°’∂’£’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’¥’°’¨ ’∏’≥’®
    this.style.backgroundColor = "";
    
    if (draggedElement) {
      draggedElement.classList.remove('dragging');
    }
  
    // ’Ä’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ¬´’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨¬ª ’Ω’°’∞’¥’°’∂’°÷É’°’Ø’∏÷Ç’¥’®
    // if (draggedElement?.dataset.originalWeek === "’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨" && draggedElement.dataset.week !== "’∞’°’¥’°÷Ä’´’π") {
    //   showToast('error', '’ç’≠’°’¨', '¬´‘µ÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨¬ª ’§’°’Ω’•÷Ä’® ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’ø’•’≤’°÷É’∏’≠’•’¨ ’¥’´’°’µ’∂ ’∞’°’¥’°÷Ä’´’π ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å:');
    //   return;
    // }
  
    if (!draggedElement || this.contains(draggedElement)) return;
  
    const newDay = this.dataset.day;
    const newSlot = this.dataset.slot;
    const newWeekType = this.dataset.weekType;
    
    // ‘≤’°’≠’¥’°’∂ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’∂’•÷Ä
    
    // 1. ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’°’≠’∏’Ω’´ ’¢’°’≠’∏÷Ç’¥’®
    const teacher = draggedElement.dataset.teacher;
    if (checkTeacherConflict(teacher, newDay, newSlot, newWeekType)) {
      showToast('error', '‘¥’°’Ω’°’≠’∏’Ω’´ ’¢’°’≠’∏÷Ç’¥', '‘¥’°’Ω’°’≠’∏’Ω’® ’°÷Ä’§’•’∂ ’°’µ’§ ’™’°’¥’´’∂ ’§’°’Ω ’∏÷Ç’∂’´');
      return;
    }
    
    // 2. ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’¨’Ω’°÷Ä’°’∂’´ ’¢’°’≠’∏÷Ç’¥’®
    const room = draggedElement.dataset.room;
    if (checkRoomConflict(room, newDay, newSlot, newWeekType)) {
      showToast('error', '‘º’Ω’°÷Ä’°’∂’´ ’¢’°’≠’∏÷Ç’¥', '‘º’Ω’°÷Ä’°’∂’® ’¶’¢’°’≤’æ’°’Æ ’ß ’ø’æ’µ’°’¨ ’™’°’¥’´’∂');
      return;
    }
    
    // 3. ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’´’∫’•÷Ä’´ ’¢’°’≠’∏÷Ç’¥’®
    const classType = draggedElement.dataset.classType;
    
    // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’°’µ’∂ ’§’°’Ω’•÷Ä’®, ’∏÷Ä’∏’∂÷Ñ ’°÷Ä’§’•’∂ ’Ø’°’∂ ’°’µ’§ ’¢’ª’ª’∏÷Ç’¥
    const existingClasses = Array.from(this.querySelectorAll('.class-block'));
    for (const existingClass of existingClasses) {
      const existingClassType = existingClass.dataset.classType;
      
      if (checkTypeConflict(classType, existingClassType)) {
        showToast('error', '‘Ω’¥’¢’•÷Ä’´ ’¢’°’≠’∏÷Ç’¥', `‘Ω’¥’¢’•÷Ä’´ ’¢’°’≠’∏÷Ç’¥‚Ä§ ${classType}-’∂ ’π’´ ’Ø’°÷Ä’∏’≤ ’∞’°’¥’°’Ø÷Å’æ’•’¨ ${existingClassType}-’´ ’∞’•’ø`);
        return;
      }
    }
  
    draggedElement.dataset.day = newDay;
    draggedElement.dataset.slot = newSlot;
    draggedElement.classList.add("modified");
    
    // ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’∂’´’¥’°÷Å’´’°
    draggedElement.style.animation = 'none';
    setTimeout(() => {
      draggedElement.style.animation = '';
    }, 10);
    
    this.appendChild(draggedElement);
  
    const id = draggedElement.dataset.id;
    if (window._dualWeekLessonsMap?.has(id)) {
      const related = window._dualWeekLessonsMap.get(id);
      related.forEach(copy => {
        copy.dataset.day = newDay;
        copy.dataset.slot = newSlot;
        copy.innerHTML = draggedElement.innerHTML;
        copy.classList.add("modified");
  
        const cellId = `cell-${newDay}-${newSlot}-${copy.dataset.course}-${copy.dataset.week}`;
        const cell = document.getElementById(cellId);
        if (cell && copy.parentNode !== cell) {
          copy.parentNode?.removeChild(copy);
          cell.appendChild(copy);
        }
      });
    }
  
    showToast('success', '‘π’°÷Ä’¥’°÷Å’æ’∏÷Ç’¥ ’ß', '‘¥’°’Ω’´ ’§’´÷Ä÷Ñ’® ’©’°÷Ä’¥’°÷Å’æ’∏÷Ç’¥ ’ß...');
  
    const payload = {
      id,
      new_day: newDay,
      new_slot: newSlot,
      course: draggedElement.dataset.course,
      week_type: draggedElement.dataset.originalWeek || draggedElement.dataset.week
    };
  
    try {
      const res = await fetch("/api/schedule/update-positions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify([payload])
      });
  
      const result = await res.json();
      if (!res.ok) {
        showToast('error', '’ç’≠’°’¨', '’â’∞’°’ª’∏’≤’æ’•÷Å ’∫’°’∞’∫’°’∂’•’¨ ’§’´÷Ä÷Ñ’®');
        console.error(result);
      } else {
        showToast('success', '’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂', '‘¥’°’Ω’´ ’§’´÷Ä÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’©’°÷Ä’¥’°÷Å’æ’•’¨ ’ß');
        
        // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’¢’∏’≤’ª’°’Ø’°’∂ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’®
        try {
          const fresh = await fetch("/schedule_approval");
          const updated = await fresh.json();
          scheduleData = updated; // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£’¨’∏’¢’°’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®
          renderSchedule(updated);
        } catch (err) {
          console.error("’â’∞’°’ª’∏’≤’æ’•÷Å ’©’°÷Ä’¥’°÷Å’∂’•’¨ ’°’¥’¢’∏’≤’ª ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’®", err);
        }
      }
    } catch (err) {
      console.error("‚ùå Error during auto-save:", err);
      showToast('error', '’ç’≠’°’¨', '’â’∞’°’ª’∏’≤’æ’•÷Å ’∫’°’∞’∫’°’∂’•’¨ ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®');
    }
  }
  
  function collectModifiedLessons() {
    const modifiedLessons = Array.from(document.querySelectorAll(".class-block.modified")).map(el => ({
      id: el.dataset.id,
      new_day: el.dataset.day,
      new_slot: el.dataset.slot,
      course: el.dataset.course,
      week_type: el.dataset.originalWeek || el.dataset.week
    }));
    
    // ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷É’∏’≠’æ’°’Æ ’ø’°÷Ä÷Ä’•÷Ä’´ ÷Ñ’°’∂’°’Ø’®
    if (modifiedLessons.length > 0) {
      showToast('success', '’ì’∏÷É’∏’≠’æ’°’Æ ’§’°’Ω’•÷Ä', `${modifiedLessons.length} ’§’°’Ω ÷É’∏÷É’∏’≠’æ’•’¨ ’ß`);
    }
    
    return modifiedLessons;
  }
  
  // ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ CSS ’∏’≥’•÷Ä drag-’´ ’∞’°’¥’°÷Ä
  document.addEventListener('DOMContentLoaded', function() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      .dragging {
        opacity: 0.6;
        transform: scale(0.95);
      }
      
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .class-block {
        animation: fadeIn 0.3s ease-out;
      }
      
      .modified {
        position: relative;
      }
      
      .modified::after {
        content: "‚úèÔ∏è";
        position: absolute;
        top: 8px;
        right: 8px;
        font-size: 12px;
      }
      
      .confirm-modal {
        animation: fadeIn 0.3s ease-out;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      }
      
      .confirm-modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        max-width: 400px;
        width: 90%;
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
      }
      
      .confirm-modal h3 {
        margin-bottom: 1rem;
        color: var(--primary, #0a2a55);
      }
      
      .confirm-modal p {
        margin-bottom: 1.5rem;
      }
      
      .confirm-modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
      }
      
      .confirm-modal button {
        padding: 0.5rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      
      .confirm-yes {
        background-color: var(--error, #ef4444);
        color: white;
      }
      
      .confirm-no {
        background-color: #e2e8f0;
        color: #1e293b;
      }
      
      .confirm-yes:hover {
        background-color: #e43c3c;
      }
      
      .confirm-no:hover {
        background-color: #d1d5db;
      }
    `;
    document.head.appendChild(styleElement);
  });