const express = require("express");
const { sql, poolPromise } = require("../models/db");

const router = express.Router();

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’°’º’°÷Ä’Ø’°’∂’•÷Ä’®
router.get("/subjects", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM subjects_editable");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching subjects" });
    }
});

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¨’Ω’°÷Ä’°’∂’∂’•÷Ä’®
router.get("/rooms", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, number FROM Rooms");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching rooms" });
    }
});

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’•’Ω’°’Ø’∂’•÷Ä’®
router.get("/types", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Types");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching types" });
    }
});


router.put('/edit/:id', async (req, res) => {
    const { id } = req.params;
    let { teacher_id, room_id, type_id, frequency } = req.body;

    console.log("Received update request:", { id, teacher_id, room_id, type_id, frequency });

    try {
        const pool = await poolPromise;

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ ’ø’æ’µ’°’¨’® ’Ø’° `schedule_editable`-’∏÷Ç’¥
        const existing = await pool.request()
            .input('id', sql.Int, id)
            .query('SELECT * FROM schedule_editable WHERE id = @id');

        if (!existing.recordset.length) {
            console.log("‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥");
            return res.status(404).json({ error: "‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥" });
        }

        console.log("üîç Existing record in schedule_editable:", existing.recordset[0]);

        // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’µ’∂ schedule_editable ’°’≤’µ’∏÷Ç’Ω’°’Ø’®
        const updateResult = await pool.request()
            .input('id', sql.Int, id)
            .input('teacher_id', sql.Int, teacher_id || null)
            .input('room_id', sql.Int, room_id || null)
            .input('type_id', sql.Int, type_id || null)
            .input('frequency', sql.NVarChar, frequency || "weekly")
            .query(`
                UPDATE schedule_editable
                SET 
                    teacher_id = @teacher_id, 
                    room_id = @room_id, 
                    type_id = @type_id, 
                    details = @frequency
                WHERE id = @id;
            `);

        console.log("Update success in schedule_editable, rows affected:", updateResult.rowsAffected);

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’®
        const checkUpdated = await pool.request()
            .input('id', sql.Int, id)
            .query('SELECT * FROM schedule_editable WHERE id = @id');

        console.log("üîé Updated record in schedule_editable:", checkUpdated.recordset[0]);

        res.json({ message: "’ì’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’Ø’°’ø’°÷Ä’æ’•÷Å", updatedData: checkUpdated.recordset[0] });
    } catch (error) {
        console.error("Error updating schedule_editable record:", error);
        res.status(500).json({ error: "Database update error", details: error.message });
    }
});

router.delete("/schedule/:id", async (req, res) => {
    const { id } = req.params;

    try {
        const pool = await poolPromise;

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ ’ø’æ’µ’°’¨’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ schedule_editable-’∏÷Ç’¥
        const existing = await pool.request()
            .input("id", sql.Int, id)
            .query("SELECT id FROM schedule_editable WHERE id = @id");

        if (!existing.recordset.length) {
            return res.status(404).json({ error: "‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥" });
        }

        // ’Ä’´’¥’∂’°’Ø’°’∂ DELETE ’∞’°÷Ä÷Å’∏÷Ç’¥’ù ’≥’´’∑’ø id-’´ ’∞’°’¥’°’±’°’µ’∂
        await pool.request()
            .input("id", sql.Int, id)
            .query("DELETE FROM schedule_editable WHERE id = @id");

        res.json({ message: "‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´÷Å ’ø’æ’µ’°’¨’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’ª’∂’ª’æ’•÷Å" });
    } catch (error) {
        console.error("Error deleting schedule record:", error);
        res.status(500).json({ error: "Server error while deleting from schedule_editable" });
    }
});

// üìå ‘º’•’Ø÷Å’´’° ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/lecture-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching lecture teachers:", error);
        res.status(500).json({ error: "Server error while fetching lecture teachers", details: error.message });
    }
});

// üìå ‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ’§’°’Ω’•÷Ä ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/practical-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching practical teachers:", error);
        res.status(500).json({ error: "Server error while fetching practical teachers", details: error.message });
    }
});

// üìå ‘º’°’¢’∏÷Ä’°’ø’∏÷Ä ’§’°’Ω’•÷Ä ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/lab-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching lab teachers:", error);
        res.status(500).json({ error: "Server error while fetching lab teachers", details: error.message });
    }
});


router.post('/subjects/add-subject', async (req, res) => {
    const {
        subjectName,
        teacherId,
        room_number,
        frequency,
        practical,
        lab
    } = req.body;

    console.log("üì© Received data on server:", req.body);

    // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’∫’°÷Ä’ø’°’§’´÷Ä ’§’°’∑’ø’•÷Ä’® ’¨÷Ä’°÷Å’æ’°’Æ ’•’∂
    if (!subjectName || !teacherId || !room_number) {
        return res.status(400).json({ error: '’ä’°÷Ä’ø’°’§’´÷Ä ’ß ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ subjectName, teacherId ÷á room_number' });
    }

    try {
        const pool = await poolPromise;

        // 1. ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ Rooms ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’Ø’° ’∂’∑’æ’°’Æ room_number (’∞’´’¥÷Ñ’ù number ’§’°’∑’ø’∏÷Ç’¥)
        const roomResult = await pool.request()
            .input('room_number', sql.NVarChar, room_number)
            .query('SELECT id FROM Rooms WHERE number = @room_number');
        if (roomResult.recordset.length === 0) {
            return res.status(400).json({ error: `‘º’Ω’°÷Ä’°’∂’®, ’∏÷Ä’´ ’∞’°’¥’°÷Ä ${room_number} ’ß, ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’π’∏÷Ç’∂’´` });
        }
        const actualRoomId = roomResult.recordset[0].id;
        console.log("‚úÖ Room id found:", actualRoomId);

        // 2. ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ Subjects ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’°’º’°÷Ä’Ø’°’µ’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
        const subjectInsertResult = await pool.request()
            .input('subjectName', sql.NVarChar, subjectName)
            .input('teacherId', sql.Int, teacherId)
            .input('room_id', sql.Int, actualRoomId)
            .query(`
                INSERT INTO Subjects (name, teacher_id, room_id)
                VALUES (@subjectName, @teacherId, @room_id);
                SELECT SCOPE_IDENTITY() AS id;
            `);
        if (!subjectInsertResult.recordset || subjectInsertResult.recordset.length === 0) {
            console.error("‚ùå Failed to insert subject into Subjects table.");
            return res.status(500).json({ error: "Failed to insert subject into Subjects table" });
        }
        const subjectId = subjectInsertResult.recordset[0].id;
        console.log("‚úÖ Inserted subject id:", subjectId);

        const subjectEditableResult = await pool.request()
            .input('subjectName', sql.NVarChar, subjectName)
            .input('teacherId', sql.Int, teacherId)
            .input('room_id', sql.Int, actualRoomId)
            .query(`
                INSERT INTO subjects_editable (name, teacher_id, room_id)
                VALUES (@subjectName, @teacherId, @room_id);
                SELECT SCOPE_IDENTITY() AS id;
            `);
        const subjectEditableId = subjectEditableResult.recordset[0].id;
        console.log("‚úÖ Inserted subject_editable id:", subjectEditableId);

        // 3. ’Ä’°’∑’æ’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’•’Ω’°’Ø’®’ù ’®’Ω’ø practical ÷á lab ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ (’§’•÷Ü’∏’¨’ø "‘¥’°’Ω")
        let classTypeName = '‘¥’°’Ω';
        if (practical) {
            classTypeName = '‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂';
        }
        if (lab) {
            classTypeName = '‘º’°’¢’∏÷Ä’°’ø’∏÷Ä';
        }

        // 4. ’ç’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’§’°’Ω’´ ’ø’•’Ω’°’Ø’´ ID-’® Types ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å
        const typeResult = await pool.request()
            .input('typeName', sql.NVarChar, classTypeName)
            .query('SELECT id FROM Types WHERE name = @typeName');
        if (typeResult.recordset.length === 0) {
            return res.status(400).json({ error: `‘¥’°’Ω’´ ’ø’•’Ω’°’Ø’® (${classTypeName}) ’π’´ ’£’ø’∂’æ’•’¨` });
        }
        const typeId = typeResult.recordset[0].id;
        console.log("‚úÖ Type ID found:", typeId);

        // 5. ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ schedule_editable ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®,
        // ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’∏’æ Subjects ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å ’Ω’ø’°÷Å’°’Æ subjectId-’´ ’°÷Ä’™’•÷Ñ’®
        const scheduleInsertResult = await pool.request()
            .input('subject_id', sql.Int, subjectId)
            .input('teacher_id', sql.Int, teacherId)
            .input('room_id', sql.Int, actualRoomId)
            .input('type_id', sql.Int, typeId)
            // ’Ä’°’¥’°’±’°’µ’∂ ÷Ö÷Ä’´’∂’°’Ø’ù frequency-’´ ’∞’°’¥’°÷Ä, ’•’©’• frequency === 'weekly' ’°’∫’° 1, ’∞’°’Ø’°’º’°’Ø ’§’•’∫÷Ñ’∏÷Ç’¥ 2:
            .input('weekly_id', sql.Int, frequency === 'weekly' ? 1 : 2)
            .query(`
                INSERT INTO schedule_editable 
                (subject_id, teacher_id, room_id, type_id, weekly_id)
                VALUES 
                (@subject_id, @teacher_id, @room_id, @type_id, @weekly_id);
                SELECT SCOPE_IDENTITY() AS id;
            `);
        if (!scheduleInsertResult.recordset || scheduleInsertResult.recordset.length === 0) {
            console.error("‚ùå Failed to insert schedule into schedule_editable table.");
            return res.status(500).json({ error: "Failed to insert schedule into schedule_editable table" });
        }
        const scheduleEditableId = scheduleInsertResult.recordset[0].id;
        console.log("‚úÖ Inserted schedule id:", scheduleEditableId);

        // 6. ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£’∏÷Ä’Æ’∂’°’Ø’°’∂’∂’•÷Ä’® ÷á ’¨’°’¢’∏÷Ä’°’ø’∏÷Ä’∂’•÷Ä’® (’•’©’• ’Ø’°’∂)
        if (practical) {
            // ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’£’∏÷Ä’Æ’∂’°’Ø’°’∂’´ ’∞’°’¥’°÷Ä ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
            const practicalInsertResult = await pool.request()
                .input('subject_id', sql.Int, subjectId)
                .input('teacher_id', sql.Int, teacherId)
                .input('room_id', sql.Int, actualRoomId)
                .input('type_id', sql.Int, typeId)
                .input('weekly_id', sql.Int, frequency === 'weekly' ? 1 : 2)
                .query(`
                    INSERT INTO schedule_editable 
                    (subject_id, teacher_id, room_id, type_id, weekly_id)
                    VALUES 
                    (@subject_id, @teacher_id, @room_id, @type_id, @weekly_id);
                    SELECT SCOPE_IDENTITY() AS id;
                `);
            console.log("‚úÖ Inserted practical schedule id:", practicalInsertResult.recordset[0].id);
        }

        if (lab) {
            // ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’¨’°’¢’∏÷Ä’°’ø’∏÷Ä’´ ’∞’°’¥’°÷Ä ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
            const labInsertResult = await pool.request()
                .input('subject_id', sql.Int, subjectId)
                .input('teacher_id', sql.Int, teacherId)
                .input('room_id', sql.Int, actualRoomId)
                .input('type_id', sql.Int, typeId)
                .input('weekly_id', sql.Int, frequency === 'weekly' ? 1 : 2)
                .query(`
                    INSERT INTO schedule_editable 
                    (subject_id, teacher_id, room_id, type_id, weekly_id)
                    VALUES 
                    (@subject_id, @teacher_id, @room_id, @type_id, @weekly_id);
                    SELECT SCOPE_IDENTITY() AS id;
                `);
            console.log("‚úÖ Inserted lab schedule id:", labInsertResult.recordset[0].id);
        }

        res.json({
            message: "‘±’º’°÷Ä’Ø’°’∂ ÷á ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’•’¨’°÷Å’æ’•÷Å’´’∂",
            subjectId,
            scheduleEditableId
        });
    } catch (err) {
        console.error("‚ùå Database Insert Error:", err);
        res.status(500).json({ error: "Database error", details: err.message });
    }
});



module.exports = router;
