const express = require("express");
const { sql, poolPromise } = require("../models/db");

const router = express.Router();

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’°’º’°÷Ä’Ø’°’∂’•÷Ä’®
router.get("/subjects", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM subjects_editable");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching subjects" });
    }
});

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¨’Ω’°÷Ä’°’∂’∂’•÷Ä’®
router.get("/rooms", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, number FROM Rooms");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching rooms" });
    }
});

// ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’§’°’Ω’´ ’ø’•’Ω’°’Ø’∂’•÷Ä’®
router.get("/types", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Types");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "Server error while fetching types" });
    }
});


router.put('/edit/:id', async (req, res) => {
    const { id } = req.params;
    let { teacher_id, room_id, type_id, frequency } = req.body;

    console.log("Received update request:", { id, teacher_id, room_id, type_id, frequency });

    try {
        const pool = await poolPromise;

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ ’ø’æ’µ’°’¨’® ’Ø’° `schedule_editable`-’∏÷Ç’¥
        const existing = await pool.request()
            .input('id', sql.Int, id)
            .query('SELECT * FROM schedule_editable WHERE id = @id');

        if (!existing.recordset.length) {
            console.log("‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥");
            return res.status(404).json({ error: "‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥" });
        }

        console.log("üîç Existing record in schedule_editable:", existing.recordset[0]);

        // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’µ’∂ schedule_editable ’°’≤’µ’∏÷Ç’Ω’°’Ø’®
        const updateResult = await pool.request()
            .input('id', sql.Int, id)
            .input('teacher_id', sql.Int, teacher_id || null)
            .input('room_id', sql.Int, room_id || null)
            .input('type_id', sql.Int, type_id || null)
            .input('frequency', sql.NVarChar, frequency || "weekly")
            .query(`
                UPDATE schedule_editable
                SET 
                    teacher_id = @teacher_id, 
                    room_id = @room_id, 
                    type_id = @type_id, 
                    details = @frequency
                WHERE id = @id;
            `);

        console.log("Update success in schedule_editable, rows affected:", updateResult.rowsAffected);

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’®
        const checkUpdated = await pool.request()
            .input('id', sql.Int, id)
            .query('SELECT * FROM schedule_editable WHERE id = @id');

        console.log("üîé Updated record in schedule_editable:", checkUpdated.recordset[0]);

        res.json({ message: "’ì’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’Ø’°’ø’°÷Ä’æ’•÷Å", updatedData: checkUpdated.recordset[0] });
    } catch (error) {
        console.error("Error updating schedule_editable record:", error);
        res.status(500).json({ error: "Database update error", details: error.message });
    }
});

router.delete("/schedule/:id", async (req, res) => {
    const { id } = req.params;

    try {
        const pool = await poolPromise;

        // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ ’ø’æ’µ’°’¨’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ schedule_editable-’∏÷Ç’¥
        const existing = await pool.request()
            .input("id", sql.Int, id)
            .query("SELECT id FROM schedule_editable WHERE id = @id");

        if (!existing.recordset.length) {
            return res.status(404).json({ error: "‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨ schedule_editable-’∏÷Ç’¥" });
        }

        // ’Ä’´’¥’∂’°’Ø’°’∂ DELETE ’∞’°÷Ä÷Å’∏÷Ç’¥’ù ’≥’´’∑’ø id-’´ ’∞’°’¥’°’±’°’µ’∂
        await pool.request()
            .input("id", sql.Int, id)
            .query("DELETE FROM schedule_editable WHERE id = @id");

        res.json({ message: "‘¥’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’´÷Å ’ø’æ’µ’°’¨’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’ª’∂’ª’æ’•÷Å" });
    } catch (error) {
        console.error("Error deleting schedule record:", error);
        res.status(500).json({ error: "Server error while deleting from schedule_editable" });
    }
});

// üìå ‘º’•’Ø÷Å’´’° ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/lecture-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching lecture teachers:", error);
        res.status(500).json({ error: "Server error while fetching lecture teachers", details: error.message });
    }
});

// üìå ‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ’§’°’Ω’•÷Ä ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/practical-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching practical teachers:", error);
        res.status(500).json({ error: "Server error while fetching practical teachers", details: error.message });
    }
});

// üìå ‘º’°’¢’∏÷Ä’°’ø’∏÷Ä ’§’°’Ω’•÷Ä ’°’∂÷Å’Ø’°÷Å’∂’∏’≤ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä
router.get("/lab-teachers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT id, name FROM Teachers");
        res.json(result.recordset);
    } catch (error) {
        console.error("‚ùå Error fetching lab teachers:", error);
        res.status(500).json({ error: "Server error while fetching lab teachers", details: error.message });
    }
});

router.post("/subjects/add-subject", async (req, res) => {
  const { subjectName, teacherId, roomNumbers, frequency, courseId } = req.body;

  try {
      const pool = await poolPromise;

      // 1Ô∏è‚É£ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ, ’°÷Ä’§’µ’∏’û÷Ñ ’∂’∑’æ’°’Æ ’Ω’•’∂’µ’°’Ø’® ’Ø’° `Rooms` ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥
      const roomCheck = await pool.request()
          .input("roomNumber", sql.NVarChar, roomNumbers)
          .query("SELECT id FROM Rooms WHERE number = @roomNumber");

      if (roomCheck.recordset.length === 0) {
          return res.status(400).json({ error: `‚ùå ’ç’≠’°’¨: ’ç’•’∂’µ’°’Ø’´ ’∞’°’¥’°÷Ä’® "${roomNumbers}" ’π’´ ’£’ø’∂’æ’•’¨ Rooms ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥` });
      }

      const roomId = roomCheck.recordset[0].id;

      // 2Ô∏è‚É£ ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä ’°’º’°÷Ä’Ø’° `subjects_editable` ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥
      const subjectInsert = await pool.request()
          .input("subjectName", sql.NVarChar, subjectName)
          .input("teacherId", sql.Int, teacherId)
          .input("roomId", sql.Int, roomId)
          .query(`
              INSERT INTO subjects_editable (name, teacher_id, room_id)
              OUTPUT INSERTED.id
              VALUES (@subjectName, @teacherId, @roomId)
          `);

      const subjectId = subjectInsert.recordset[0].id;

      // 3Ô∏è‚É£ ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’£÷Ä’°’º’∏÷Ç’¥ `schedule_editable` ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥
      await pool.request()
          .input("courseId", sql.Int, courseId)
          .input("subjectId", sql.Int, subjectId)
          .input("teacherId", sql.Int, teacherId)
          .input("roomId", sql.Int, roomId)
          .input("weeklyId", sql.Int, frequency === "weekly" ? 1 : 2)
          .query(`
              INSERT INTO schedule_editable (course_id, subject_id, teacher_id, room_id, weekly_id)
              VALUES (@courseId, @subjectId, @teacherId, @roomId, @weeklyId)
          `);

      res.status(201).json({ message: "‚úÖ ‘±’º’°÷Ä’Ø’°’∂ ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’•’¨’°÷Å’æ’•÷Å!" });

  } catch (err) {
      console.error("‚ùå Server error:", err);
      res.status(500).json({ error: "’ç’•÷Ä’æ’•÷Ä’´ ’Ω’≠’°’¨", details: err.message });
  }
});


module.exports = router;
