import json
import networkx as nx

# ’Ñ’°÷Ä’¥’´’∂’°’µ’´’∂ ’ø’´’∫’•÷Ä’´ ’¢’°’º’°÷Ä’°’∂’®’ù ’∫’°’ø’Ø’°’∂’∏÷Ç’¥ ’ß ’¥’•÷Ä ’§’´÷Å’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’´’∂
TYPE_MAP = {
    "‘¥’°’Ω": "lecture",
    "‘≥’∏÷Ä’Æ": "work",     # ’°’º’°’∂÷Å ’∞’°’¥’°÷Ä’® (’∞’°’¥’•’¥’°’ø’°’¢’°÷Ä ’≠’°’º’∂’•’¨ ’π’Ø’°’∂)
    "‘≥’∏÷Ä’Æ1": "work1",
    "‘≥’∏÷Ä’Æ2": "work2",
    "‘≥’∏÷Ä’Æ3": "work3",
    "‘º’°’¢1": "lab1",
    "‘º’°’¢2": "lab2",
    "‘º’°’¢3": "lab3",
    "‘º’°’¢4": "lab4"
}

# ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’°’∂’∞’°’¥’°’ø’•’≤’•’¨’´ ’≠’¥’¢’•÷Ä’®’ù
# work1 ’∞’°’Ø’°’º’°’Ø lab1, lab2 ÷á work1
# work2 ’∞’°’Ø’°’º’°’Ø lab2, lab3 ÷á work2
# work3 ’∞’°’Ø’°’º’°’Ø lab3, lab4 ÷á work3
CONFLICTS = {
    "work1": {"lab1", "lab2", "work1"},
    "work2": {"lab2", "lab3", "work2"},
    "work3": {"lab3", "lab4", "work3"},
    "lab1": {"work1"},
    "lab2": {"work1", "work2"},
    "lab3": {"work2", "work3"},
    "lab4": {"work3"}
}

def build_graph(data):
    """
    ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’£÷Ä’°÷Ü, ’∏÷Ä’ø’•’≤ ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’£÷Ä’°’º’∏÷Ç’¥ ’Ω’ø’°’∂’§’°÷Ä’ø ’∂’∏’§ ’ß,
    ÷á ’°’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’ß ’¨÷Ä’°÷Å’∏÷Ç÷Å’´’π ’∞’°’ø’Ø’∏÷Ç’©’µ’∏÷Ç’∂’ù mapped_type’ù ’∏÷Ä’® ’Ω’ø’°’∂’∏÷Ç’¥ ’ß TYPE_MAP-’´ ’¥’´’ª’∏÷Å’∏’æ:
    """
    G = nx.Graph()
    for i, entry in enumerate(data):
        # ‘µ’∂’©’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ, ’∏÷Ä entry‚Äì’∂ ’∏÷Ç’∂’´ 'level', 'course', 'subject', 'type' (’¨’´’Ω’ø), 'teachers', 'rooms',
        # 'weekly_frequency' ÷á 'biweekly_frequency' ’¢’°’∂’°’¨’´’∂’•÷Ä’®:
        raw_type = entry["type"][0] if entry.get("type") and entry["type"] else "N/A"
        mapped_type = TYPE_MAP.get(raw_type, raw_type)
        # ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏’§’® ÷á ’°’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ mapped_type-’®:
        G.add_node(i, **entry, mapped_type=mapped_type)
    
    n = len(data)
    # ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£÷Ä’°÷Ü’´ ’•’º÷Ñ’∂’•÷Ä’®, ’•÷Ä’¢ ’∏÷Ä÷á’ß ’•÷Ä’Ø’∏÷Ç ’∂’∏’§’•÷Ä’´ ’¥’´’ª÷á ’Ø’∏’∂÷Ü’¨’´’Ø’ø ’Ø’°:
    for i in range(n):
        for j in range(i + 1, n):
            node1 = G.nodes[i]
            node2 = G.nodes[j]
            conflict = False

            # 1. ‘¥’°’Ω’°’≠’∏’Ω’∂’•÷Ä’´ ’Ø’∏’∂÷Ü’¨’´’Ø’ø (’∞’´’¥’∂’æ’∏÷Ç’¥ ’ß, ’©’• ’°÷Ä’§’µ’∏÷Ñ ’§’°’Ω’°’≠’∏’Ω’∂’•÷Ä’® ’∞’°’¥’®’∂’Ø’∂’∏÷Ç’¥ ’•’∂)
            if set(node1.get("teachers", [])) & set(node2.get("teachers", [])):
                conflict = True

            # 2. ‘º’Ω’°÷Ä’°’∂’∂’•÷Ä’´ ’Ø’∏’∂÷Ü’¨’´’Ø’ø (’∞’°’¥’®’∂’Ø’∂’∏÷Ç’¥ ’•’∂ ’¨’Ω’°÷Ä’°’∂’∂’•÷Ä’®)
            if set(node1.get("rooms", [])) & set(node2.get("rooms", [])):
                conflict = True

            # 3. ’è’´’∫’•÷Ä’´ ’Ø’∏’∂÷Ü’¨’´’Ø’ø, ’©’• ’´’∂’π’∫’•’Ω ’•’∂÷Ñ ’æ’•÷Ä’°’£÷Ä’∏÷Ç’¥ mapped_type-’®
            type1 = node1.get("mapped_type", "")
            type2 = node2.get("mapped_type", "")

            # ‘µ’©’• ’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨ ’§’°’Ω (lecture) ’•’∂, ’°’∫’° ’Ø’∏’∂÷Ü’¨’´’Ø’ø ’°’∂’∏÷Ä’∏’∑:
            if type1 == "lecture" and type2 == "lecture":
                conflict = True
            else:
                # ‘µ’©’• ’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨ ’¶’∂’æ’°’Æ ’•’∂ ’∏÷Ä’∫’•’Ω unnumbered work ("work") 
                # ’°’∫’° ’Ø’∏’∂÷Ü’¨’´’Ø’ø ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ø’´’∫’∏’æ ’π’•’∂ ’∞’°’Ø’°’¥’°÷Ä’ø’∏÷Ç’¥:
                if type1 == "work" and type2 == "work":
                    pass
                else:
                    # ’Ü’∏÷Ç’µ’∂ ’ø’´’∫’•÷Ä’´ (work1, work2, work3, lab1, lab2, lab3, lab4) ’∞’°’Ø’°’¥’°÷Ä’ø’∏÷Ç’©’µ’∏÷Ç’∂’®:
                    if type1 in CONFLICTS:
                        if type2 in CONFLICTS[type1]:
                            conflict = True
                    if type2 in CONFLICTS:
                        if type1 in CONFLICTS[type2]:
                            conflict = True

            if conflict:
                G.add_edge(i, j)
    return G

def color_graph(G):
    """
    ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß ’£÷Ä’°÷Ü’´ ’£÷Ä’´’•’¨’´ ’∫’¨’°’∏÷Ç (greedy) ’°’¨’£’∏÷Ä’´’©’¥’ù’ù ’∞’∂’°÷Ä’°’æ’∏÷Ä’´’∂’Ω ’∂’æ’°’¶’•÷Å’∂’•’¨ ’Ø’∏’∂÷Ü’¨’´’Ø’ø’∂’•÷Ä’®:
    """
    coloring = nx.coloring.greedy_color(G, strategy="largest_first")
    for node, color in coloring.items():
        G.nodes[node]["time_slot"] = color
    return G

def detect_conflicts(G):
    """
    ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’ß ’Ø’∏’∂÷Ü’¨’´’Ø’ø’∂’•÷Ä’®, ’∏÷Ä ’•÷Ä’Ø’∏÷Ç ’∂’∏’§’•÷Ä ’∂’∏÷Ç’µ’∂ time_slot ’∏÷Ç’∂’•’∂:
    """
    conflicts = []
    for i, j in G.edges():
        if G.nodes[i]["time_slot"] == G.nodes[j]["time_slot"]:
            conflicts.append({
                "course1": G.nodes[i].get("course", ""),
                "subject1": G.nodes[i].get("subject", "N/A"),
                "course2": G.nodes[j].get("course", ""),
                "subject2": G.nodes[j].get("subject", "N/A"),
                "issue": "Time slot conflict"
            })
    return conflicts

def schedule_from_colored_graph(G):
    """
    ’ä’°÷Ä’¢’•÷Ä’°’¢’°÷Ä ’æ’•÷Ä’°÷É’∏’≠’∏÷Ç’¥ ’ß ’£÷Ä’°÷Ü’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®,’ù ’±÷á’°’æ’∏÷Ä’•’¨’∏’æ ’æ’•÷Ä’ª’∂’°’Ø’°’∂ ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø,
    ’∂’•÷Ä’°’º’∏÷Ç’¥’∏’æ ’∑’°’¢’°’©’´ ÷Ö÷Ä, ’™’°’¥’°’µ’´’∂ ’Ω’¨’∏’ø, ÷á ’∑’°’¢’°’©’°’Ø’°’∂/’•÷Ä’Ø’∏÷Ç’Ω’µ’∏÷Ç’∂ ÷É’∏÷É’∏’≠’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:
    """
    schedule = []
    for node, data in G.nodes(data=True):
        time_slot = data["time_slot"]
        # ‘ø’°’ø’°÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´ ’∫’°÷Ä’¶ ’∞’°’∑’æ’°÷Ä’Ø’ù, ÷Ö÷Ä’´’∂’°’Ø’ù ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’•’∂÷Ñ modulo ’ø’°÷Ä’¢’•÷Ä ’©’æ’•÷Ä’´ ’∞’°’¥’°÷Ä
        week_type = data.get("biweekly_frequency", 1) if data.get("biweekly_frequency", 1) == 2 else data.get("weekly_frequency", 1)
        day_of_week = (time_slot % 5) + 1    # 1-5 ÷Ö÷Ä’•÷Ä’´ ’∞’°’¥’°÷Ä
        time_of_day = (time_slot % 4) + 1     # 1-4 ’™’°’¥’°’µ’´’∂ ’Ω’¨’∏’ø’∂’•÷Ä
        schedule.append({
            "level": data.get("level", ""),
            "course": data.get("course", ""),
            "subject": data.get("subject", "N/A"),
            "type": data.get("type", []),
            "teachers": data.get("teachers", []),
            "rooms": data.get("rooms", []),
            "week_type": week_type,
            "day_of_week": day_of_week,
            "time_of_day": time_of_day
        })
    return schedule

if __name__ == "__main__":
    with open("updated_everything.json", "r", encoding="utf-8") as f:
        sample_data = json.load(f)
    
    G = build_graph(sample_data)
    G = color_graph(G)
    conflicts = detect_conflicts(G)
    final_schedule = schedule_from_colored_graph(G)
    
    with open("final_schedule.json", "w", encoding="utf-8") as f:
        json.dump(final_schedule, f, ensure_ascii=False, indent=4)
    
    with open("conflicts.json", "w", encoding="utf-8") as f:
        json.dump(conflicts, f, ensure_ascii=False, indent=4)
    
    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏! üé®")
    if conflicts:
        print("\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:")
        print(json.dumps(conflicts, ensure_ascii=False, indent=4))
